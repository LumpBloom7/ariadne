language: cpp

sudo: enabled
dist: focal

branches:
  only:
  - master
  - working
  - ci

matrix:
  include:

    - name: macOS 10.15.7 + AppleClang 10
      os: osx
      osx_image: xcode12.2
      env: COMPILER=clang++
      
    - name: macOS 10.15.7 + GCC 10 [NoCairo]
      os: osx
      osx_image: xcode12.2
      env: COMPILER=gcc COMPILER_VERSION=10 DISABLE_CAIRO=ON

    - name: Ubuntu 20.04 + Clang 10
      os: linux
      env: COMPILER=clang COMPILER_VERSION=10

    - name: Ubuntu 20.04 + GCC 9
      os: linux
      env: COMPILER=gcc COMPILER_VERSION=9

    - name: Ubuntu 20.04 + GCC 9 [Coverage]
      os: linux
      env: COMPILER=gcc COMPILER_VERSION=9 COVERAGE=ON

before_install:
  - |
    if [[ "$COMPILER" == "gcc" ]]; then
      COMPILER_CMD="g++-$COMPILER_VERSION"
      if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then COMPILER_PKG="gcc@$COMPILER_VERSION"; else COMPILER_PKG="g++-$COMPILER_VERSION"; fi
    fi
  - |
    if [[ "$COMPILER" == "clang" ]]; then
      if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        COMPILER_CMD="clang++"
        COMPILER_PKG=""
      else
        COMPILER_CMD="clang++-$COMPILER_VERSION"
        COMPILER_PKG="clang-$COMPILER_VERSION"
      fi
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      NPROC="sysctl -n hw.ncpu"
      brew cask uninstall --force oclint
      if [[ -z "$DISABLE_CAIRO" ]]; then CAIRO_PKG=cairo; else CAIRO_PKG=""; fi
      brew upgrade python@3.9
      brew install $COMPILER_PKG python3 mpfr gmp $CAIRO_PKG
      export PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig
      sudo easy_install pip
      sudo pip3 install --upgrade pip
      sudo pip3 install coverage pytest
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      NPROC=nproc
      sudo apt update
      if [[ -z "$DISABLE_CAIRO" ]]; then CAIRO_PKG=libcairo2-dev; else CAIRO_PKG=""; fi
      sudo apt install -y cmake pkg-config lcov $COMPILER_PKG $CAIRO_PKG libmpfr-dev python3-pip python3-dev
      sudo pip3 install coverage pytest
    fi

script:
  - echo "Running on $($NPROC) threads ..."
  - CMAKE_ARGS="-DCMAKE_CXX_COMPILER=$COMPILER_CMD"
  - if [[ -n "$COVERAGE" ]]; then CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug -DCOVERAGE=ON"; else CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release"; fi
  - if [[ "$TRAVIS_BRANCH" == master ]] || [[ "$TRAVIS_BRANCH" == working ]]; then CMAKE_ARGS="$CMAKE_ARGS -DWERROR=ON"; fi
  - cmake . $CMAKE_ARGS
  - if [[ -n "$COVERAGE" ]]; then make tests -j $($NPROC); else make -j $($NPROC); fi
  - ctest -L "primary" -j $($NPROC)
  - |
    if [[ -z "$COVERAGE" ]]; then
      sudo make install
      cp -Rf tutorials ~/tutorials
      cd ~/tutorials/hybrid_evolution
      cmake . $CMAKE_ARGS
      make -j $($NPROC)
      ./hybrid_evolution_tutorial -v 0 > /dev/null
    fi
  - |
    if [[ -z "$COVERAGE" ]]; then
      cd ~/tutorials/rigorous_numerics
      cmake . $CMAKE_ARGS
      make -j $($NPROC)
      ./rigorous_numerics_tutorial > /dev/null
    fi
  - |
    if [[ -z "$COVERAGE" ]]; then
      mkdir ~/tutorials/python
      cd $TRAVIS_BUILD_DIR
      cp -Rf python/tutorials/* ~/tutorials/python
      export LD_LIBRARY_PATH=/usr/local/lib
      cd ~/tutorials/python
      python3 tutorial.py > /dev/null
    fi
  
after_success:
  - |
    if [[ -n "$COVERAGE" ]]; then
      lcov --directory . --capture --output-file coverage.info
      lcov --remove coverage.info '/usr/*' --output-file coverage.info
      lcov --list coverage.info
      bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
    fi
